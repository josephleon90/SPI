package entidades;

import java.io.InputStream;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;

import android.app.ProgressDialog;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.util.Log;

import com.example.spi.Global;
import com.example.spi.PublicidadAdapter;

// Generated 15-dic-2013 17:08:56 by Hibernate Tools 3.2.1.GA



/**
 * Publicidad generated by hbm2java
 */
public class Publicidad {


     private int codPublicidad;
     private LocalComercial localComercial;
     private String imagenURL;
     private Bitmap imagen;
     private String fecha_registro;
     private String fecha_vencimiento;
     private int estado;
     private PublicidadAdapter sta;

    public Publicidad() {
    }

	

	public int getCodPublicidad() {
		return codPublicidad;
	}



	public void setCodPublicidad(int codPublicidad) {
		this.codPublicidad = codPublicidad;
	}



	public LocalComercial getLocalComercial() {
		return localComercial;
	}



	public void setLocalComercial(LocalComercial localComercial) {
		this.localComercial = localComercial;
	}



	public String getImagenURL() {
		return imagenURL;
	}



	public void setImagenURL(String imagenURL) {
		this.imagenURL = imagenURL;
	}



	public Bitmap getImagen() {
		return imagen;
	}



	public void setImagen(Bitmap imagen) {
		this.imagen = imagen;
	}



	public String getFecha_registro() {
		return fecha_registro;
	}



	public void setFecha_registro(String fecha_registro) {
		this.fecha_registro = fecha_registro;
	}



	public String getFecha_vencimiento() {
		return fecha_vencimiento;
	}



	public void setFecha_vencimiento(String fecha_vencimiento) {
		this.fecha_vencimiento = fecha_vencimiento;
	}



	public int getEstado() {
		return estado;
	}



	public void setEstado(int estado) {
		this.estado = estado;
	}



	public PublicidadAdapter getSta() {
		return sta;
	}



	public void setSta(PublicidadAdapter sta) {
		this.sta = sta;
	}
	
	public static Bitmap getBitmapFromURL(String src) {
	    HttpClient httpClient = new DefaultHttpClient();
		HttpContext localContext = new BasicHttpContext();
		HttpGet httpGet = new HttpGet(src);
		InputStream inputStream = null;
		try {
			HttpResponse response = httpClient.execute(httpGet,localContext);
			HttpEntity entity = response.getEntity();
			inputStream = entity.getContent();
			return BitmapFactory.decodeStream(inputStream);
		} catch (Exception e) {
			System.out.println(e.getLocalizedMessage());
			return null;
		}
	}

	@Override
	public String toString() {
		return "Publicidad [codPublicidad=" + codPublicidad
				+ ", localComercial=" + localComercial + ", imagen=" + imagenURL
				+ ", estado=" + estado + ", fecha_registro=" + fecha_registro
				+ ", fecha_vencimiento=" + fecha_vencimiento + "]";
	}
	
	public void loadImage(PublicidadAdapter sta, int i,int cantImagenes, ProgressDialog dialogo) {
        // HOLD A REFERENCE TO THE ADAPTER
        this.sta = sta;
        if (imagenURL != null && !imagenURL.equals("")) {
            new ImageLoadTask(dialogo,i,cantImagenes).execute(imagenURL);
        } else
        	System.out.println("URL no cargada");
    }
    
	// ASYNC TASK TO AVOID CHOKING UP UI THREAD
    private class ImageLoadTask extends AsyncTask<String, String, Bitmap> {
    	int indice;
    	int cantImagenes;
    	String nombreImagen;
    	ProgressDialog dialogo;
 
        ImageLoadTask(ProgressDialog dialogo,int indice, int cantImagenes){
        	this.dialogo=dialogo;
        	this.indice=indice;
        	this.cantImagenes=cantImagenes;
        }
    	
    	@Override
        protected void onPreExecute() {
            Log.i("ImageLoadTask", "Cargado de imagenes en proceso...");
        }
 
        // PARAM[0] IS IMG URL
        protected Bitmap doInBackground(String... param) {
            Log.i("ImageLoadTask", "Intentando cargar imagen: " + param[0]);
            nombreImagen = param[0];
            try {
                return getBitmapFromURL(Global.HOST_API+Global.IMAGE_FOLDER+"/"+param[0]);
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
        }
 
        protected void onProgressUpdate(String... progress) {
            // NO OP
        }
 
        protected void onPostExecute(Bitmap ret) {
            if (ret != null) {
                Log.i("ImageLoadTask", "Exitosamente cargada imagen " + nombreImagen );
                imagen = ret;
                if (sta != null) {
                    // WHEN IMAGE IS LOADED NOTIFY THE ADAPTER
                    sta.notifyDataSetChanged();
                    
                    //Verifico si la imagen es la ultima o no para asi quitar de mensaje
                    // que se esta cargando
                    if(indice==cantImagenes-1)
                    	dialogo.dismiss();
                }
            } else {
                Log.e("ImageLoadTask", "Fallo al cargar imagen " + nombreImagen);
            }
        }
    }

}


